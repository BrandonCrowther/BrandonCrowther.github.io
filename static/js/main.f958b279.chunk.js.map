{"version":3,"sources":["config.js","Objects.js","NeuralPreloadedInterface.js","NeuralTrainingInterface.js","Game.js","GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BOARD_SIZE","require","Snake","x","y","next","undefined","this","deleteLast","Tail","Head","node","arr","push","getPositions","length","Cheese","tf","NeuralPreloadedInterface","model","head","cheese","score","distX","getLength","distY","distSouth","Math","abs","params","checkCollision","predict","tidy","_","tensor","tensor2d","flatten","arraySync","formatMove","move","processed","indexOf","max","NeuralTrainingInterface","newModel","inputs","scores","sequential","layers","dense","units","activation","inputShape","compile","optimizer","loss","metrics","categoricalCrossentropy","board","distNorth","distEast","distWest","canMoveUp","canMoveRight","canMoveDown","canMoveLeft","testScore","save","inputsAsTensor","scoreAsTensor","fit","epochs","dispose","Game","input","Array","map","e","fill","ticks","floor","random","createNewCheese","states","dist","distance","redraw","getMove","oldNode","gameOver","checkCheese","newDist","potX","potY","snakePos","find","forEach","coords","sqrt","pow","GameBoard","props","sleep","ms","Promise","resolve","setTimeout","increaseSpeed","setState","speed","state","decreaseSpeed","toggleMode","trainingMode","isLoaded","tfModel","modelInterface","gameLoop","game","done","tick","train","topScore","run","trainingInterface","fitReplay","colorMap","0","1","2","3","onClick","className","f","Spinner","animation","role","style","width","height","React","Component","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f958b279.chunk.js","sourcesContent":["module.exports = {\n    BOARD_SIZE: 10\n}","\n\nconst {BOARD_SIZE} = require('./config')\n\nclass Snake{\n    constructor(x, y, next = undefined){\n        this.x = x;\n        this.y = y;\n        this.next = next;\n    }\n\n\n    deleteLast () {\n        if(this.next){\n            if(this.next.next){\n                return this.next.deleteLast()\n            }\n            else{\n                this.next = null;\n                return true;\n            }\n        }\n    }\n\n}\n\nclass Tail extends Snake{}\n\nclass Head extends Snake{\n    checkCollision () {\n        let node = this.next;\n\n        while(node != null){\n            if(this.x == node.x && this.y == node.y)\n                return true;\n            node = node.next;\n        }\n\n        if(this.x == BOARD_SIZE || this.x < 0)\n            return true;\n        if(this.y == BOARD_SIZE || this.y < 0)\n            return true;\n\n        return false;\n    }\n    \n    getPositions () {\n        let arr = [[this.x, this.y]]\n        let node = this.next;\n        while(node != null){\n            arr.push([node.x, node.y])\n            node = node.next;\n        }\n        return arr;\n    }\n\n    getLength(){\n        return this.getPositions().length\n    }\n}\n\nclass Cheese{\n    constructor(x, y){\n        this.x = x;\n        this.y = y;\n    }\n}\n\n\nexport {\n    Snake,\n    Tail,\n    Head,\n    Cheese,\n}\n","\n\nconst {Snake, Tail, Head, Cheese} = require('./Objects')\nconst {BOARD_SIZE} = require('./config')\nconst tf = require('@tensorflow/tfjs')\n\n\nclass NeuralPreloadedInterface{\n    constructor(model, tf){\n        this.model = model\n        this.tf = tf\n    }\n\n    getMove(head, cheese, score) {\n        const posX = head.x / BOARD_SIZE\n        const posY = head.y / BOARD_SIZE\n        const snakeLen = head.getLength() / (BOARD_SIZE * BOARD_SIZE)\n\n        const distX = (cheese.x - head.x) / BOARD_SIZE\n        const distY = (cheese.y - head.y) / BOARD_SIZE\n\n        // distance in each direction\n        const distSouth = distY >= 0 ? Math.abs(distY) : 0\n        const distNorth = distY <= 0 ? Math.abs(distY) : 0\n        const distEast =  distX >= 0 ? Math.abs(distX) : 0\n        const distWest =  distX <= 0 ? Math.abs(distX) : 0\n\n        // hack to check collisions because I didnt think far enough ahead\n        const canMoveUp =     new Head(head.x, head.y - 1, head.next).checkCollision() ? 0 : 1\n        const canMoveRight =  new Head(head.x + 1, head.y, head.next).checkCollision() ? 0 : 1\n        const canMoveDown =   new Head(head.x, head.y + 1, head.next).checkCollision() ? 0 : 1\n        const canMoveLeft =   new Head(head.x - 1, head.y, head.next).checkCollision() ? 0 : 1\n\n        const params = [\n            // posX,\n            // posY,\n            // snakeLen,\n            distNorth,\n            distEast,\n            distSouth,\n            distWest,\n            canMoveUp, \n            canMoveRight, \n            canMoveDown, \n            canMoveLeft\n        ]\n\n        \n        const predict = tf.tidy(_ => {\n            const tensor =  tf.tensor2d(params, [1, params.length])\n            return this.model.predict(tensor).flatten().arraySync()\n        })\n\n        const move = this.formatMove(predict)\n        return move\n    }\n\n    formatMove(move) {\n        // console.log(move)\n        const processed = move.indexOf(Math.max(...move));\n        if(processed == 0) //N\n            return [0, -1]\n        if(processed == 1) //E\n            return [1, 0]\n        if(processed == 2) //S\n            return [0, 1]\n        if(processed == 3) //W\n            return [-1, 0]\n    }\n\n}\n\n\nexport {NeuralPreloadedInterface}","const tf = require('@tensorflow/tfjs')\nconst {Snake, Tail, Head, Cheese} = require('./Objects')\nconst {BOARD_SIZE} = require('./config')\n\nclass NeuralTrainingInterface{\n    constructor(){\n        this.newModel()\n\n        this.inputs = []\n        this.scores = []\n    }\n\n    newModel(){      \n        tf.tidy(() => {\n            this.model = tf.sequential({\n                layers: [\n                    tf.layers.dense({units: 4, activation: \"softmax\", inputShape: [8]})\n                ]\n            })\n            this.model.compile({\n                optimizer: 'adam',\n                loss: tf.metrics.categoricalCrossentropy,\n            })\n        })\n    }\n\n    \n    getMove(head, cheese, score, board) {\n\n\n        const posX = head.x / BOARD_SIZE\n        const posY = head.y / BOARD_SIZE\n        const snakeLen = head.getLength() / (BOARD_SIZE * BOARD_SIZE)\n\n        const distX = (cheese.x - head.x) / BOARD_SIZE\n        const distY = (cheese.y - head.y) / BOARD_SIZE\n\n        // distance in each direction\n        const distSouth = distY >= 0 ? Math.abs(distY) : 0\n        const distNorth = distY <= 0 ? Math.abs(distY) : 0\n        const distEast =  distX >= 0 ? Math.abs(distX) : 0\n        const distWest =  distX <= 0 ? Math.abs(distX) : 0\n\n        // hack to check collisions because I didnt think far enough ahead\n        const canMoveUp =     new Head(head.x, head.y - 1, head.next).checkCollision() ? 0 : 1\n        const canMoveRight =  new Head(head.x + 1, head.y, head.next).checkCollision() ? 0 : 1\n        const canMoveDown =   new Head(head.x, head.y + 1, head.next).checkCollision() ? 0 : 1\n        const canMoveLeft =   new Head(head.x - 1, head.y, head.next).checkCollision() ? 0 : 1\n\n        const params = [\n            // posX,\n            // posY,\n            // snakeLen,\n            distNorth,\n            distEast,\n            distSouth,\n            distWest,\n            canMoveUp, \n            canMoveRight, \n            canMoveDown, \n            canMoveLeft\n        ]\n\n        \n        const predict = tf.tidy(_ => {\n            const tensor =  tf.tensor2d(params, [1, params.length])\n            return this.model.predict(tensor).flatten().arraySync()\n        })\n        \n\n        this.inputs.push(params)\n\n        // for any valid moves apply a minimum training weight as 0.1\n        // for any invalid moves, set to 0 because DO NOT WANT\n        var testScore = [0,0,0,0]\n        if(canMoveUp > 0)\n            testScore[0] = 0.1 + (distNorth / 2) / 1.1\n        if(canMoveRight > 0)\n            testScore[1] = 0.1 + (distEast / 2) / 1.1\n        if(canMoveDown > 0)\n            testScore[2] = 0.1 + (distSouth / 2) / 1.1\n        if(canMoveLeft > 0)\n            testScore[3] = 0.1 + (distWest / 2) / 1.1\n\n        this.scores.push(testScore)\n\n        const move = this.formatMove(predict)\n        return move\n    }\n\n    formatMove(move) {\n        const processed = move.indexOf(Math.max(...move));\n        if(processed == 0) //N\n            return [0, -1]\n        if(processed == 1) //E\n            return [1, 0]\n        if(processed == 2) //S\n            return [0, 1]\n        if(processed == 3) //W\n            return [-1, 0]\n    }\n\n    async save(score){\n        await this.model.save('downloads://\" + ' + score)\n    }\n\n    async fitReplay(){\n        const [inputsAsTensor, scoreAsTensor] = tf.tidy(_ => [\n            tf.tensor2d(this.inputs, [this.inputs.length, this.inputs[0].length]),\n            tf.tensor2d(this.scores, [this.scores.length, this.scores[0].length])\n        ])\n        \n        await this.model.fit(inputsAsTensor, scoreAsTensor, {epochs: 100})\n\n        // reset replay\n        this.scores = []\n        this.inputs = []\n\n        // probably redundant disposal\n        scoreAsTensor.dispose()\n        inputsAsTensor.dispose()\n    }\n\n}\n\nexport {NeuralTrainingInterface}","const {Snake, Tail, Head, Cheese} = require('./Objects')\nconst {BOARD_SIZE} = require('./config')\n\nconst EMPTY = 0;\nconst HEAD = 1;\nconst TAIL = 2;\nconst CHEESE = 3;\n\n\nclass Game{\n    constructor(input){\n        this.input = input;\n        this.board = [...Array(BOARD_SIZE)].map(e => Array(BOARD_SIZE).fill(EMPTY));\n        this.score = 0\n        this.ticks = 0\n        this.head = new Head(\n            Math.floor((BOARD_SIZE / 4) + (Math.random() * (BOARD_SIZE / 4))), \n            Math.floor((BOARD_SIZE / 4) + (Math.random() * (BOARD_SIZE / 4)))\n        )\n        this.head.next = new Tail(this.head.x -1, this.head.y)\n        this.cheese = this.createNewCheese()\n\n        this.states = []\n\n        this.dist = this.distance()\n        \n\n        this.redraw()\n    }\n\n\n    tick() {\n        let move = this.input.getMove(this.head, this.cheese, this.score, this.board)\n        let oldNode = new Tail(this.head.x, this.head.y)\n\n        if(this.head.next){\n            oldNode.next = this.head.next\n            this.head.next = oldNode\n        }\n        else{\n            this.head.next = oldNode;\n        }\n        \n        this.head.x += move[0]\n        this.head.y += move[1]\n\n        let gameOver = this.head.checkCollision()\n\n        let cheeseFound = this.checkCheese()\n\n        if(cheeseFound){\n            this.cheese = this.createNewCheese()\n            this.score += 10\n            this.ticks = 0\n        }\n        else\n            this.head.deleteLast()\n\n        this.ticks++\n        // this.score += 1\n\n\n        if(this.ticks == BOARD_SIZE * BOARD_SIZE){\n            gameOver = true\n        }\n\n        if(gameOver){\n            // this.score -= 10;\n        }\n        if(!gameOver){\n            this.redraw()\n\n            const newDist = this.distance()\n            if(this.dist > newDist){\n                this.score += 1\n            }\n            else\n                this.score -= 1\n\n            this.dist = newDist\n        }\n\n        return gameOver;\n    }\n\n\n    checkCheese(){\n        return (this.head.x == this.cheese.x \n            && this.head.y == this.cheese.y)\n    }\n\n    createNewCheese(){\n        let potX = Math.floor(Math.random() * BOARD_SIZE)\n        let potY = Math.floor(Math.random() * BOARD_SIZE)\n\n        const snakePos = this.head.getPositions()\n\n        while(snakePos.find(x => x[0] == potX && x[1] == potY)){\n            potX = Math.floor(Math.random() * BOARD_SIZE)\n            potY = Math.floor(Math.random() * BOARD_SIZE)\n        }\n\n        return new Cheese(potX, potY);\n    }\n\n\n    redraw(){\n        this.board = [...Array(BOARD_SIZE)].map(e => Array(BOARD_SIZE).fill(EMPTY));\n        let positions = this.head.getPositions()\n\n        positions.forEach((coords) => {\n            this.board[coords[1]][coords[0]] = TAIL;\n        })\n        \n        this.board[this.head.y][this.head.x] = HEAD;\n        this.board[this.cheese.y][this.cheese.x] = CHEESE;\n\n        this.states.push(this.board)\n        \n    }\n\n    distance(){\n        return Math.sqrt(Math.abs(\n            Math.pow((this.head.x - this.cheese.x), 2) +\n            Math.pow((this.head.y - this.cheese.y), 2)\n        ))\n    }\n}\n\n\nexport { Game }","import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './GameBoard.css';\nimport * as tf from '@tensorflow/tfjs';\nimport { NeuralPreloadedInterface } from './NeuralPreloadedInterface'\nimport { NeuralTrainingInterface}  from './NeuralTrainingInterface'\nimport { Game } from './Game'\n\nclass GameBoard extends React.Component{\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n            isLoaded: false,\n            board: [[]],\n            speed: 25,\n            trainingMode: false\n        }\n\t}\n\t\n    sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\n\tasync componentDidMount() {\n        await tf.ready()\n\n        const tfModel = await tf.loadLayersModel('model/model.json');\n        const modelInterface = new NeuralPreloadedInterface(tfModel)\n        \n\t\tthis.setState({\n            isLoaded: true,\n            modelInterface: modelInterface\n        }, this.gameLoop)\n    }\n\n    async gameLoop(){\n        while(!this.state.trainingMode){\n            let game = new Game(this.state.modelInterface)\n\n            let done = false;\n            while(!done){\n                done = game.tick();\n                this.setState({board: game.board})\n                await this.sleep(this.state.speed)\n            }\n    \n            await this.sleep(1000)\n        }\n        this.train()\n    }\n\n    async train(){\n        var topScore = 0;\n        var run = 1;\n        const trainingInterface = new NeuralTrainingInterface();\n        while(this.state.trainingMode){\n            run++;\n            var game = new Game(trainingInterface)\n            var done = false;\n            while(!done){\n                done = game.tick();\n                await this.sleep(this.state.speed)\n                this.setState({board: game.board, run: run})\n            }\n    \n            await trainingInterface.fitReplay()\n\n            if(game.score > topScore){\n                topScore = game.score;\n                // await trainingInterface.save('downloads://\" + ' + topScore)\n                this.setState({topScore: topScore})\n            }\n        }\n        this.gameLoop()\n    }\n\n    increaseSpeed = _ =>{\n        this.setState({speed: Math.max(this.state.speed - 5, 0)})\n    }\n\n    decreaseSpeed = _ =>{\n        this.setState({speed: this.state.speed + 5})\n    }\n\n    toggleMode = _ => {\n        this.setState({trainingMode: !this.state.trainingMode})\n    }\n\n\t\n\trender() {\n        const {trainingMode, isLoaded, board, run} = this.state;\n        \n        const fatSpinnerStyle = {width: 4+\"rem\", height: 4+\"rem\"}\n\n        const colorMap = {\n            0: \"gray\",\n            1: \"red\",\n            2: \"black\",\n            3: \"yellow\"\n        }\n\n\t\tif(!isLoaded){\n\t\t\treturn (\n\t\t\t\t<Spinner animation=\"border\" role=\"status\" style={fatSpinnerStyle}>\n                    <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n\t\t\t)\n\t\t}\n\t\treturn (\n            <div>\n                <div>\n                    <button onClick={this.toggleMode}>Toggle Mode</button> {trainingMode ? \"Training Mode\" : \"Pre-trained Mode\"}\n                </div>\n                <div>\n                    {/* Run: {run} */}\n                </div>\n                <div>\n                    <button onClick={this.decreaseSpeed}>-</button>\n                    Game Speed\n                    <button onClick={this.increaseSpeed}>+</button>\n                </div>\n                <div className=\"board\">\n                    {board.map(e => {\n                        return e.map(f => \n                            <div className={\"block \" + colorMap[f]}></div>)\n                    })}\n                </div>\n            </div>\n\t\t);\n\t}\n\t\t\t\n}\nexport default GameBoard;\n\t\t","import React from 'react';\nimport './App.css';\nimport GameBoard from './GameBoard'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Snake Neural Network</h1>\n      <p>\n        <span>By Brandon Crowther</span> \n        <strong>&nbsp;&nbsp;|&nbsp;&nbsp;</strong> \n        <a href=\"https://github.com/BrandonCrowther/SnakeNN\">Github</a>\n        <strong>&nbsp;&nbsp;|&nbsp;&nbsp;</strong> \n        <a href=\"mailto:bcrowthe11@gmail.com\">bcrowthe11@gmail.com</a>\n      </p>\n      <div className=\"game\">\n        <div>\n          <GameBoard></GameBoard>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}